library(tidyverse)
devtools::use_data_raw()
knitr::opts_chunk$set(echo = FALSE,
cache = TRUE,
cache.rebuild = FALSE)
library(tidyverse)
library(readstata13)
install.packages("readstata13")
library(readstata13)
path <- "../../Data/Country_Year_V-Dem_other_STATA_v7/Country_Year_V-Dem_other_STATA_v7/"
VDem_plus <- read.dta13(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
rm(path)
mlr::summarizeColumns(VDem_plus) %>%
filter(na < 4000, grepl("^e_", name))
mlr::summarizeColumns(VDem_plus)
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7/Country_Year_V-Dem_other_STATA_v7/"
VDem_plus <- read.dta13(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
rm(path)
mlr::summarizeColumns(VDem_plus)
VDem_plus <- CountryYear::country_year_coder(country_name, year, COWcode, code_type ="cow")
VDem_plus <- CountryYear::country_year_coder(VDem_plus, country_name, year, COWcode, code_type ="cow")
VDem_plus <- CountryYear::country_year_coder(VDem_plus, country_name, year, COWcode, code_type ="cow")
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7/Country_Year_V-Dem_other_STATA_v7/"
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
VDem_plus <- read.dta13(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
install.packages("pander", dep = TRUE)
install.packages("coreNLP", dep = TRUE)
install.packages("ggseas", dep = TRUE)
VDem_plus <- VDem_plus %>%
mutate(country = if_else(country_id == 196, "Sao Tome and Principe", country)) %>%
CountryYear::country_year_coder(VDem_plus, country_name, year, COWcode, code_type ="cow")
VDem_plus
VDem_plus <- VDem_plus %>%
mutate(country = if_else(country_id == 196, "Sao Tome and Principe", country_name)) %>%
CountryYear::country_year_coder(VDem_plus, country_name, year, COWcode, code_type ="cow")
VDem_plus <- VDem_plus %>%
mutate(country = if_else(country_id == 196, "Sao Tome and Principe", country_name)) %>%
CountryYear::country_year_coder(country_name, year, COWcode, code_type ="cow")
VDem_plus <- VDem_plus %>%
mutate(country_name = if_else(country_id == 196, "Sao Tome and Principe", country_name)) %>%
CountryYear::country_year_coder(country_name, year, COWcode, code_type ="cow")
VDem_plus <- read.dta13(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
VDem_plus <- VDem_plus %>%
mutate(country_name = if_else(country_id == 196, "Sao Tome and Principe", country_name)) %>%
CountryYear::country_year_coder(country_name, year, COWcode, code_type ="cow")
VDem_plus %>% filter(grepl("Soma|Pales",country_name)) %>% select(country_name, GW_country_name, COWcode, country_id, GWn, cown) %>% distinct()
VDem_plus %>% filter(grepl("Soma|Pales",country_name)) %>% select(country_name, GW_country_name, COWcode, country_id, GWn) %>% distinct()
mlr::summarizeColumns(VDem_plus)
names(VDem_plus)
VDem_plus <- VDem_plus %>%
select(country_name:year, GW_country_name, GWn, everything()) %>%
rename(vdem_country_name = country_name,
vdem_country_id = country_id,
vdem_country_text_id = country_text_id,
vdem_cown = COWcode)
VDem_plus
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7/Country_Year_V-Dem_other_STATA_v7.1/"
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7/Country_Year_V-Dem_other_STATA_v7.1/"
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
path <- "../../Data/Country_Year_V-Dem_other_STATA_v7/Country_Year_V-Dem_other_STATA_v7.1/"
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
getwd()
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7.1/"
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7.1/"
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.dta")) %>%
as_tibble()
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7.1/Country_Year_V-Dem_other_STATA_v7.1/"
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.1.dta")) %>%
as_tibble()
knitr::opts_chunk$set(echo = FALSE,
cache = TRUE,
cache.rebuild = FALSE)
library(tidyverse)
library(haven)
getwd()
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7.1/Country_Year_V-Dem_other_STATA_v7.1/"
rm(path)
VDem_plus <- VDem_plus %>%
select(country_name:year, GW_country_name, GWn, everything()) %>%
rename(vdem_country_name = country_name,
vdem_country_id = country_id,
vdem_country_text_id = country_text_id,
vdem_cown = COWcode)
VDem_plus <- VDem_plus %>%
CountryYear::country_year_coder(country_name, year, COWcode, code_type ="cow")
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.1.dta")) %>%
as_tibble()
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7.1/Country_Year_V-Dem_other_STATA_v7.1/"
VDem_plus <- haven::read_dta(paste0(path, "V-Dem-DS-CY+Others-v7.1.dta")) %>%
as_tibble()
VDem_plus <- VDem_plus %>%
mutate(country_name = if_else(country_id == 196, "Sao Tome and Principe", country_name)) %>%
CountryYear::country_year_coder(country_name, year, COWcode, code_type ="cow")
mlr::summarizeColumns(VDem_plus)
mlr::summarizeColumns(VDem_plus)
VDem_plus <- VDem_plus %>%
select(country_name:year, GW_country_name, GWn, everything()) %>%
rename(vdem_country_name = country_name,
vdem_country_id = country_id,
vdem_country_text_id = country_text_id,
vdem_cown = COWcode)
rm(path)
devtools::use_data(VDem_plus, overwrite = TRUE)
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7.1/Country_Year_V-Dem_other_STATA_v7.1/"
vdem_codebook_raw <- pdf_text(paste0(path,"Codebook_v7.1.pdf"))
install.packages("pdftools", dep = TRUE)
vdem_codebook_raw <- pdf_text(paste0(path,"Codebook_v7.1.pdf"))
knitr::opts_chunk$set(echo = FALSE,
cache = TRUE,
cache.rebuild = FALSE)
library(tidyverse)
library(haven)
library(pdftools)
library(stringr)
getwd()
path <- "../../../Data/Country_Year_V-Dem_other_STATA_v7.1/Country_Year_V-Dem_other_STATA_v7.1/"
vdem_codebook_raw <- pdf_text(paste0(path,"Codebook_v7.1.pdf"))
VDem <- VDem_plus %>%
select(-starts_with("e_"))
names(VDem_plus)
names(VDem_plus) %>% tail()
names(VDem_plus) %>% tail(30)
VDem <- VDem_plus %>%
select(starts_with("e_"))
VDem <- VDem_plus %>%
select(!starts_with("e_"))
VDem <- VDem_plus %>%
select(-starts_with("e_"))
VDem <- VDem_plus %>%
select(-contains("\\be_"))
?starts_with
VDem <- VDem_plus %>%
select(-matches("\\be_"))
VDem <- VDem_plus %>%
select(matches("(?!e_).+"))
VDem <- VDem_plus %>%
select(matches("^[^e]"))
VDem <- VDem_plus %>%
select(matches("^[^e][^_].+"))
VDem <- VDem_plus %>%
select(matches("[^e][^_].+"))
VDem
toc <- vdem_codebook_raw[5:27]
headers_from_toc <-  toc %>%
str_extract_all(regex("[0-9]+(\\.)[0-9]+(\\.)?[0-9]*[ ]?.+(\\([A-Z\\*\\(\\)]{1,2}\\))( )?(\\([A-Z\\*]{1,2}\\))?( )?(\\([A-Z\\*]{1,2}\\))?[\\s\\r\\n]*\\([\\w\\*, \\r\\n/]{2,}\\)", multiline = TRUE)) %>%
unlist() %>%
str_trim() %>%
str_replace_all("\\r\\n","") %>%
str_replace_all("[ ]{2,}"," ") %>%
str_replace("\\(A\\(C\\)\\)", "(A)(C)")
headers_from_toc
headers_from_toc
number <- str_extract(headers_from_toc, "^[0-9]+(\\.)[0-9]+(\\.)?[0-9]*")
check_headers <- readxl::read_excel("vdem_headers.xlsx", col_names = FALSE)
check_number <- str_extract(check_headers$X__1, "^[0-9]+(\\.)[0-9]+(\\.)?[0-9]*")
check_number[!(check_number %in% number)]
number[!(number %in% check_number)]
type_var <- str_extract(headers_from_toc, "(\\([A-Z\\*]{1,2}\\))( )?(\\([A-Z\\*]{1,2}\\))?( )?(\\([A-Z\\*]{1,2}\\))?") %>%
str_trim()
which(is.na(type_var))
headers_from_toc <- headers_from_toc[which(!is.na(type_var))]
type_var <- na.omit(type_var)
labels <- str_replace(headers_from_toc, "^[0-9]+(\\.)[0-9]+(\\.)?[0-9]*", "") %>%
str_extract("[[:print:]-[\\(\\)] ]+(?=\\()") %>%
str_trim
which(is.na(labels) | labels == "")
var_names <- str_extract(headers_from_toc,"\\([\\w\\*/, ]+\\)$") %>%
str_replace_all("\\(", "") %>%
str_replace_all("\\)", "") %>%
str_replace_all("([\\w]+)(,)?( )?\\*_osp", "\\1, \\1_osp") %>%
str_replace_all("([\\w]+)_osp, \\*_ord", "\\1_osp, \\1_ord") %>%
str_replace_all("([\\w]+)_3C /_4C", "\\1_3C, \\1_4C") %>%
str_replace_all("([\\w]+)_4C /_5C", "\\1_4C, \\1_5C")
vdem_codebook_raw <- vdem_codebook_raw[which(grepl("This section groups together macro-level indices that describe features of democracy",
vdem_codebook_raw)):length(vdem_codebook_raw)]
vdem_codebook_raw <- vdem_codebook_raw %>% str_replace(paste0("\\b",as.character(1:length(vdem_codebook_raw) + 48), "$"), "")
knitr::kable(vdem_codebook_raw[22])
split_vdem <- str_split_fixed(paste(vdem_codebook_raw, collapse = "\r\n"), regex(paste0("\\r\\n",number,"[ ]+")), 2)[ ,2]
split_vdem <- str_split_fixed(split_vdem, regex(paste0("\\r\\n", c(number[2:length(number)], "References"),"[ ]+")), n = 2)[ , 1]
install.packages("qdap", dep = TRUE)
split_vdem[820] <- split_vdem[820] %>%
qdapRegex::rm_non_ascii() %>%
str_replace("\\r\\n","") %>%
str_replace("References Aboubarb[[:print:][:cntrl:]\u00a8]+","")
split_vdem[820]
project_managers <- split_vdem %>%
str_replace_all("\\r\\n"," ") %>%
str_extract("Project manager(s)?:[\\s\\w\\d[:punct:]]+") %>%
str_replace("Project manager(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace("(\\.)?Compiler.+|(\\.)?Question.+|(\\.)?Clarification.+|(\\.)?Scale.+|(\\.)?Subset.+|This section.+|The following.+|This set of questions.+|In this section.+|A .+|Two types of media.+|Among national.+","\\.") %>%
str_replace(" \\.","")
project_managers[ !is.na(project_managers) & str_length(project_managers) > 20] %>% unique()
compilers <- split_vdem %>%
str_replace_all("\\r\\n"," ") %>%
str_extract("Compiler(s)?:[\\s\\w\\d[:punct:]]+") %>%
str_replace("Compiler(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace("(\\.)?Project manager.+|(\\.)?Compiler.+|(\\.)?Question.+|(\\.)?Clarification.+|(\\.)?Scale.+|(\\.)?Subset.+|This section.+|The following.+|This set of questions.+|In this section.+|A .+|Two types of media.+|Among national.+","\\.") %>%
str_replace(" \\.","")
unique(compilers)
compilers[compilers == "."] <- NA
extraction_pattern <- "Question(s)?:.+|Clarification(s)?:.+|Aggregation(s)?:.+|Response(s)?:.+|Source(s)?:.+|Scale(s)?:.+|Note(s)?:.+|Answer type(s)?:.+|Data release(s)?:.+|Citation(s)?:.+|(CCP )?[O|o]rdering(s)?:.+|Cross-coder aggregation(s)?:.+|Coverage:.+"
questions <- split_vdem %>%
str_replace_all("\\r\\n"," ") %>%
str_extract(regex("Question(s)?:[\\s\\w\\d[:punct:]]+", multiline= TRUE)) %>%
str_replace("Question(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
clarifications <- split_vdem %>%
str_replace_all("\\r\\n"," ") %>%
str_extract(regex("Clarification(s)?:[\\s\\w\\d[:punct:]]+", multiline= TRUE)) %>%
str_replace("Clarification(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"\\.") %>%
str_trim()
aggregation <-  split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("Aggregation(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/\\^]+") %>%
str_replace("Aggregation(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
responses <- split_vdem %>%
str_replace_all("\\r\\n"," ") %>%
str_extract("Response(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Response(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
responses[ !is.na(responses) & str_length(responses) > 50] %>% unique()
notes <- split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("Note(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Note(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
sources <- split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("Source(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Source(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
sources[ !is.na(sources) & str_length(sources) > 50] %>% unique()
scale <- split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("Scale(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Scale(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
scale[ !is.na(scale) & str_length(scale) > 20] %>% unique()
answer_type <- split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("Answer type(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Answer type(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
answer_type[ !is.na(answer_type)] %>% unique()
data_release <- split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("Data release(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Data release(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(paste0(extraction_pattern,"|Citation:"),"") %>%
str_trim()
data_release[ !is.na(data_release) ] %>% unique()
citation <- split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("Citation(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Citation(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(paste0(extraction_pattern,"|[0-9]+(\\.)[0-9]+(\\.)?[0-9]*.+|2 Mid-Level Democracy.+|V\\-Dem Indicators 3 Elections.+|[0-9][0-9]? [A-Z].+|Part III.+"),"") %>%
str_trim()
citation[ !is.na(citation) ] %>% unique()
ordering <- split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("[O|o]rdering(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Ordering(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
ordering[ !is.na(ordering) ] %>% unique()
ordering[ordering == ""] <- NA
cross_coder <- split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("Cross-coder aggregation(s)?:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Cross-coder aggregation(s)?:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
cross_coder[ !is.na(cross_coder) ] %>% unique()
coverage <- split_vdem %>% str_replace_all("\\r\\n"," ") %>%
str_extract("Coverage:[\\s\\w\\d[:punct:]=+\\(\\)\\*/]+") %>%
str_replace("Coverage:( )?", "") %>%
str_replace_all("[ ]{2,}", " ") %>%
str_replace(extraction_pattern,"") %>%
str_trim()
coverage[ !is.na(coverage) ] %>% unique()
vdem_codebook <- data_frame(number = number, name = var_names, label = labels, type = type_var,
project_manager = project_managers, compiler = compilers, question = questions,
clarification = clarifications, responses = responses, scale =scale, aggregation = aggregation,
note = notes, ordering = ordering, cross_coder = cross_coder, source = sources, data_release = data_release,
citation = citation)
vdem_codebook <- vdem_codebook %>%
mutate(responses = plyr::mapvalues(responses,
"-1: if no legislature. 0: if none (including cases where parties are o",
"-1: if no legislature. 0: if none (including cases where parties are officially banned). 1: if one (including cases where other parties are officially banned). 2: if more."),
scale = str_replace_all(scale, "\\.$", ""),
data_release = str_replace_all(data_release, "\\.$", ""),
type = str_replace_all(type, " ", ""),
name = str_replace_all(name, "_ ","_"),
type = str_replace_all(type, "\\)\\(","),("),
label = ifelse(type == "(CJ)", "Chief justice (CJ) highest ordinary court", label),
type = plyr::mapvalues(type, from = "(CJ)", to = "(E)"),
cross_coder = plyr::mapvalues(cross_coder, from = c("Bayesian item response theory measurement model (see V- Dem Methodology",
"Bayesian item response theory measurement model (see V- Dem Methodology).",
"Bayesian item response theory measurement model (see V- Dem Methodology, posted at V-Dem.net).",
"Bayesian item response theory measurement model (see V- Dem Methodology,)."),
to = rep("Bayesian item response theory measurement model (see V- Dem Methodology)",4)),
name = str_trim(name, "left"))
vdem_codebook <-  vdem_codebook %>% unnest(name = strsplit(name, ","))
vdem_codebook <- vdem_codebook %>% select(number, name, label, everything())
vdem_codebook$name <- str_trim(vdem_codebook$name, "left")
vdem_codebook <- vdem_codebook %>%
mutate(section = str_extract(number, "^[0-9]+") %>%
str_replace("\\.","") %>%
as.integer()) %>%
select(section, everything())
Hmisc::describe(vdem_codebook) %>% pander::pander()
vdem_codebook
devtools::use_data(vdem_codebook, overwrite = TRUE)
vdem_codebook$name[ vdem_codebook$name %in%  names(vdem_reduced) ]
vdem_codebook$name[ vdem_codebook$name %in%  names(VDem_plus) ]
vdem_codebook$name[ !vdem_codebook$name %in%  names(VDem_plus) ]
names(VDem_plus)[ !names(VDem_plus) %in% vdem_codebook$name  ]
VDem <- VDem_plus[ !grepl("^e_", names(VDem_plus))]
names(VDem_plus)
grepl("^e_", names(VDem_plus))
grepl("^e_", names(VDem_plus)) %>% tail(30)
VDem <- VDem_plus[ !grepl("^e_", names(VDem_plus)), ]
VDem <- VDem_plus[ , !grepl("^e_", names(VDem_plus)) ]
VDem <- VDem_plus[ , 1 ]
VDem
VDem <- VDem_plus[ , which(!grepl("^e_", names(VDem_plus))) ]
which(!grepl("^e_", names(VDem_plus)))
grepl("^e_", names(VDem_plus))
!grepl("^e_", names(VDem_plus))
!grepl("^e_", names(VDem_plus)) %>% tail(30)
which(!grepl("^e_", names(VDem_plus)) %>% tail(30))
VDem_plus[ , !grepl("^e_", names(VDem_plus)) ]
a <- VDem_plus[ , !grepl("^e_", names(VDem_plus)) ]
a
a %>% select(-starts_with("e_"))
which(grepl("^e_", names(VDem_plus)))
VDem_plus[ ,which(grepl("^e_", names(VDem_plus))) ]
rm(a)
which(grepl("^e_", names(VDem_plus)))[-1]
which(grepl("^e_", names(VDem_plus)))[1]
which(grepl("^e_", names(VDem_plus)))[:1]
length(which(grepl("^e_", names(VDem_plus))))
length(names(VDem_plus))
VDem <- VDem_plus[ , c(1:(which(grepl("^e_", names(VDem_plus)))[1] - 1),
which(grepl("^e_", names(VDem_plus)))[length(which(grepl("^e_", names(VDem_plus)))) + 1]:length(names(VDem_plus)))  ]
(which(grepl("^e_", names(VDem_plus)))[length(which(grepl("^e_", names(VDem_plus))))] + 1)
length(names(VDem_plus))
(which(grepl("^e_", names(VDem_plus)))[length(which(grepl("^e_", names(VDem_plus))))] + 1)
1:(which(grepl("^e_", names(VDem_plus)))[1] - 1)
(which(grepl("^e_", names(VDem_plus)))[length(which(grepl("^e_", names(VDem_plus))))] + 1):length(names(VDem_plus))
VDem <- VDem_plus[ , c(1:(which(grepl("^e_", names(VDem_plus)))[1] - 1),
(which(grepl("^e_", names(VDem_plus)))[length(which(grepl("^e_", names(VDem_plus))))] + 1):length(names(VDem_plus)))  ]
